<!doctype html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="ScreenOrientation" content="autoRotate:disabled">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl" crossorigin="anonymous">

    <title>Hello, world!</title>
</head>
<body style="width:100vw; height:90vh; background-color:lightgray">
    <div class="container">
        <div class="row my-1" style="height:30vh">
            <div id="tpPositionXY" class="col-12 h-100" style="background-color:gray; ">
                <div>position XY</div>
            </div>
        </div>
        <div class="row my-1" style="height:10vh">
            <div id="tpPositionZ" class="col-12 h-100" style="background-color:gray; ">
                <div>position Z</div>
            </div>
        </div>

        <div class="row my-2" style="height:30vh">
            <div id="tpRotationXY" class="col-9 h-100" style="background-color:gray; ">
                <div>rotation XY</div>
            </div>
            <div id="tpRotationZ" class="col-2 h-100 mx-1" style="background-color:gray;">
                <div>rotation Z</div>
            </div>
        </div>
        <div class="row my-2" style="height:10vh">
            <div id="tpRecordRotation" class="col-2 h-100" style="background-color:gray; ">
                <div></div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row">
            <div id="pInfoPosition" class="col">

            </div>
        </div>
        <div class="row">
            <div id="pInfoOrientation" class="col">
            </div>
        </div>
    </div>

    <script src="/lib/signalr.js" crossorigin="anonymous"></script>

    <script src="https://code.jquery.com/jquery-3.3.1.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.6.0/dist/umd/popper.min.js" integrity="sha384-KsvD1yqQ1/1+IA7gi3P0tyJcT3vR+NdBTt13hSJ2lnve8agRGXTTyNaBYmCR/Nwi" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.min.js" integrity="sha384-nsg8ua9HAw1y0W1btsyWgBklPnCUAFLuTMS2G72MMONqmOymq585AcH49TLBQObG" crossorigin="anonymous"></script>


    <script>
        class TouchPanel {
            constructor(jqueryDivPanel, startHandler, moveHandler, endHandler) {                
                var divPanel = jqueryDivPanel[0];
                this.startHandler = startHandler;
                this.moveHandler = moveHandler;
                this.endHandler = endHandler;

                var that = this;

                divPanel.addEventListener("touchstart", function (e) {
                    that.startHandler();
                    that.touchPosStart = e.touches[0];
                    that.touchPosEnd = that.touchPosStart;
                    that.timer = setInterval(function(){
                        var x = Number(that.touchPosEnd.clientX - that.touchPosStart.clientX);
                        var y = Number(that.touchPosEnd.clientY - that.touchPosStart.clientY);

                        that.moveHandler(x, y);
                        //connection.invoke("MoveShapePositionXY", x.toFixed(2), y.toFixed(2));
                    }, 100);
                    
                });

                divPanel.addEventListener("touchend", function (e) {
                    e.preventDefault();
                    clearInterval(that.timer);
                    var x = Number(that.touchPosEnd.clientX - that.touchPosStart.clientX);
                    var y = Number(that.touchPosEnd.clientY - that.touchPosStart.clientY);
                   
                }, false);

                divPanel.addEventListener("touchmove", function (e) {
                    e.preventDefault();
                    that.touchPosEnd = e.touches[0];
                    var x = Number(that.touchPosEnd.clientX - that.touchPosStart.clientX);
                    var y = Number(that.touchPosEnd.clientY - that.touchPosStart.clientY);
                    
                }, false);
            }

            //zmienne
            touchPosStart;
            touchPosEnd;
            eventTouchEnd;
            timer;            

        }

        class Position3dPanel {
            constructor(connectionHub, jqPanelXY, jqPanelZ) {
                this.connectionHub = connectionHub;
                var that = this;
                
                this.panelXY = new TouchPanel(jqPanelXY,
                    function () { that.positionXY_start(); },
                    function (x,y) { that.positionXY_move(x,y); },
                    function () { that.positionXY_end(); });

                this.panelZ = new TouchPanel(jqPanelZ,
                    function () { that.positionZ_start(); },
                    function (x, y) { that.positionZ_move(x, y); },
                    function () { that.positionZ_end(); });
            }

            positionXY_start() {
                this.connectionHub.invoke("SaveObjectPosition");
            }

            positionXY_move(x, y) {
                this.connectionHub.invoke("MoveObjectPositionXYZ", x, y,0);
            }

            positionXY_end() { }

            positionZ_start() {
                this.connectionHub.invoke("SaveObjectPosition");
            }

            positionZ_move(x, y) {
                this.connectionHub.invoke("MoveObjectPositionXYZ", 0, 0, -x);
            }
            positionZ_end() { }
        }

        class Rotation3dPanel extends Position3dPanel {

            positionXY_start() {
                this.connectionHub.invoke("SaveObjectRotation");
            }

            positionXY_move(x, y) {
                this.connectionHub.invoke("RotateObjectXYZ", -y, -x, 0);
            }

            positionZ_start() {
                this.connectionHub.invoke("SaveObjectRotation");
            }

            positionZ_move(x, y) {
                this.connectionHub.invoke("RotateObjectXYZ", 0, 0, -y);
            }
        }

        class Rotation3dPhone {
            timer;
            alpha;
            beta;
            gamma;

            constructor(connectionHub, jqPanel) {
                this.connectionHub = connectionHub;
                var divPanel = jqPanel[0];
                var that = this;

                if (window.DeviceOrientationEvent) {
                    window.addEventListener("deviceorientation",
                        function (event) {
                            //var absolute = event.absolute;
                            that.alpha = Number(event.alpha);
                            that.beta = Number(event.beta);
                            that.gamma = Number(event.gamma);
                        });
                } else {
                    alert("Sorry, your browser doesn't support Device Orientation");
                }

                divPanel.addEventListener("touchstart", function (e) {
                    that.connectionHub.invoke("SaveObjectRotation");

                    that.timer = setInterval(function () {
                        that.connectionHub.invoke("RotateObjectXYZ", that.alpha, that.beta, that.gamma);
                        var pInfo = $('#pInfoOrientation');
                        pInfo.html(that.alpha.toFixed(2) + " " + that.beta.toFixed(2) + " " + that.gamma.toFixed(2));

                    }, 100);

                });

                divPanel.addEventListener("touchend", function (e) {
                    e.preventDefault();
                    clearInterval(that.timer);                    
                }, false);

                divPanel.addEventListener("touchmove", function (e) {
                    e.preventDefault();
                   
                }, false);
            }
        }

        var connection = new signalR.HubConnectionBuilder()
            .withUrl('/shapeHub')
            .build();

        connection.start();


        //var panel = new TouchPanel($('#tpPosition'));
        var panel = new Position3dPanel(connection, $('#tpPositionXY'), $('#tpPositionZ'));
        var rotation = new Rotation3dPanel(connection, $('#tpRotationXY'), $('#tpRotationZ'))
        var rr = new Rotation3dPhone(connection, $('#tpRecordRotation'));

        function positionXYHandler(x, y) {
            //$.post("PositionXY", { x: x, y: y });
            //alert("test " + x  + " "+ y);


        }



        


        //var lockFunction = window.screen.orientation.lock;
        //if (lockFunction.call(window.screen.orientation, 'landscape')) {
        //    console.log('Orientation locked')
        //} else {
        //    console.error('There was a problem in locking the orientation')
        //}

        //init();

        
            //alert('tzzz');
    </script>
</body>
</html>