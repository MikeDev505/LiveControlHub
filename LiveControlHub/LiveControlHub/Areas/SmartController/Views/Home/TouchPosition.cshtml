<!doctype html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="ScreenOrientation" content="autoRotate:disabled">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl" crossorigin="anonymous">

    <title>Hello, world!</title>
</head>
<body style="width:100vw; height:90vh; background-color:lightgray">
    <div class="container-fluid">
        <div class="row">
            <div class="col-9">                
                <div class="row" style="height:10vh">
                    <button id="bHandR" class="col-3 h-100" onclick="setActiveBone('hand_ik.R');">
                        Hand.R
                    </button>
                    <button id="bHandL" class="col-3 h-100" onclick="setActiveBone('hand_ik.L');">
                        Hand.L
                    </button>
                    <button id="bHead" class="col-3 h-100" onclick="setActiveBone('head');">
                        Head
                    </button>
                    <button id="tpRecordRotation" class="col-3 h-100">
                        rr
                    </button>
                </div>
                <div class="row" style="height:10vh">
                    <button id="bFootR" class="col-3 h-100" onclick="setActiveBone('foot_ik.R');">
                        Foot.R
                    </button>
                    <button id="bFootL" class="col-3 h-100" onclick="setActiveBone('foot_ik.L');">
                        Foot.L
                    </button>
                    <button id="bTorso" class="col-3 h-100" onclick="setActiveBone('torso');">
                        Torso
                    </button>
                </div>                
            </div>
            <div class="col-3">
                <div class="row h-100">
                    <div id="tpHand" class="col-12 h-100 mx-1" style="background-color:gray; ">
                        <div>hand</div>
                    </div>
                </div>
                
            </div>
        </div>

        

        <div class="row my-1" style="height:30vh">
            <div id="tpPositionXY" class="col-9 h-100" style="background-color:gray; ">
                <div>position XY</div>
            </div>
            <div id="tpPositionZ" class="col-2 h-100 mx-1" style="background-color:gray; ">
                <div>position Z</div>
            </div>
        </div>
        <div class="row my-1" style="height:10vh">
            <button class="col-1" onclick="viewModel.resetRotation(true, false, false)">R</button>
            <div id="tpRotationX" class="col-11 h-100" style="background-color:gray; ">
                <div>rotation X</div>
            </div>
        </div>
        <div class="row my-1" style="height:10vh">
            <button class="col-1" onclick="viewModel.resetRotation(false, true, false)">R</button>
            <div id="tpRotationY" class="col-11 h-100" style="background-color:gray;">
                <div>rotation Y</div>
            </div>
        </div>
        <div class="row my-1" style="height:10vh">
            <button class="col-1" onclick="viewModel.resetRotation(false, false, true)">R</button>
            <div id="tpRotationZ" class="col-11 h-100" style="background-color:gray;">
                <div>rotation Z</div>
            </div>
        </div>


    </div>

    <div class="container">
        <div class="row">
            <div id="pInfoPosition" class="col">

            </div>
        </div>
        <div class="row">
            <div id="pInfoOrientation" class="col">
            </div>
        </div>
    </div>

    <script src="/lib/signalr.js" crossorigin="anonymous"></script>

    <script src="https://code.jquery.com/jquery-3.3.1.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.6.0/dist/umd/popper.min.js" integrity="sha384-KsvD1yqQ1/1+IA7gi3P0tyJcT3vR+NdBTt13hSJ2lnve8agRGXTTyNaBYmCR/Nwi" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.min.js" integrity="sha384-nsg8ua9HAw1y0W1btsyWgBklPnCUAFLuTMS2G72MMONqmOymq585AcH49TLBQObG" crossorigin="anonymous"></script>


    <script>

        class rString {
            constructor(val) {
                this.val = val;
            }

            setVal(val) {
                this.val = val;
            }
        }


        class TouchPanel {
            constructor(jqueryDivPanel, startHandler, moveHandler, endHandler) {                
                var divPanel = jqueryDivPanel[0];
                this.startHandler = startHandler;
                this.moveHandler = moveHandler;
                this.endHandler = endHandler;

                var that = this;

                divPanel.addEventListener("touchstart", function (e) {
                    that.startHandler();
                    that.touchPosStart = e.touches[0];
                    that.touchPosEnd = that.touchPosStart;
                    that.timer = setInterval(function(){
                        var x = Number(that.touchPosEnd.clientX - that.touchPosStart.clientX);
                        var y = Number(that.touchPosEnd.clientY - that.touchPosStart.clientY);

                        that.moveHandler(x, y);
                        //connection.invoke("MoveShapePositionXY", x.toFixed(2), y.toFixed(2));
                    }, 100);
                    
                });

                divPanel.addEventListener("touchend", function (e) {
                    e.preventDefault();
                    clearInterval(that.timer);
                    var x = Number(that.touchPosEnd.clientX - that.touchPosStart.clientX);
                    var y = Number(that.touchPosEnd.clientY - that.touchPosStart.clientY);
                   
                }, false);

                divPanel.addEventListener("touchmove", function (e) {
                    e.preventDefault();
                    that.touchPosEnd = e.touches[0];
                    var x = Number(that.touchPosEnd.clientX - that.touchPosStart.clientX);
                    var y = Number(that.touchPosEnd.clientY - that.touchPosStart.clientY);
                    
                }, false);
            }

            //zmienne
            touchPosStart;
            touchPosEnd;
            eventTouchEnd;
            timer;            

        }

        class Position3dPanel {
            constructor(connectionHub, jqPanelXY, jqPanelZ, objectName) {
                this.connectionHub = connectionHub;
                this.objectName = objectName;
                var that = this;
                
                this.panelXY = new TouchPanel(jqPanelXY,
                    function () { that.positionXY_start(); },
                    function (x,y) { that.positionXY_move(x,y); },
                    function () { that.positionXY_end(); });

                this.panelZ = new TouchPanel(jqPanelZ,
                    function () { that.positionZ_start(); },
                    function (x, y) { that.positionZ_move(x, y); },
                    function () { that.positionZ_end(); });
            }

            positionXY_start() {
                this.connectionHub.invoke("ExecuteCommand", `rigifyControler.save_bone_position('${this.objectName.val}')`);
            }

            positionXY_move(x, y) {
                var s = 0.1;
                this.connectionHub.invoke("ExecuteCommand", `rigifyControler.add_bone_position('${this.objectName.val}', (${x*s},${-y*s},0))`);
            }

            positionXY_end() { }

            positionZ_start() {
                this.connectionHub.invoke("ExecuteCommand", `rigifyControler.save_bone_position('${this.objectName.val}')`);
            }

            positionZ_move(x, y) {
                var s = 0.1;
                this.connectionHub.invoke("ExecuteCommand", `rigifyControler.add_bone_position('${this.objectName.val}', (0,0,${-y*s}))`);
            }
            positionZ_end() { }
        }

        class Rotation3dPanel extends Position3dPanel {

            positionXY_start() {
                this.connectionHub.invoke("ExecuteCommand", `rigifyControler.save_bone_rotation('${this.objectName.val}')`);
            }

            positionXY_move(x, y) {
                var s = 0.02;
                this.connectionHub.invoke("ExecuteCommand", `rigifyControler.add_bone_rotation('${this.objectName.val}',(${-y*s},${-x*s},0))`);
            }

            positionZ_start() {
                this.connectionHub.invoke("ExecuteCommand", `rigifyControler.save_bone_rotation('${this.objectName.val}')`);
            }

            positionZ_move(x, y) {
                var s = 0.02;
                this.connectionHub.invoke("ExecuteCommand", `rigifyControler.add_bone_rotation('${this.objectName.val}',(0,0,${-y * s}))`);
            }
        }

        class Rotation3dPanel3 {
            constructor(connectionHub, jqPanelX, jqPanelY, jqPanelZ, objectName) {
                this.connectionHub = connectionHub;
                this.objectName = objectName
                var that = this;

                this.panelX = new TouchPanel(jqPanelX,
                    function () { that.positionX_start(); },
                    function (x, y) { that.positionX_move(x, y); },
                    function () { that.positionX_end(); });

                this.panelY = new TouchPanel(jqPanelY,
                    function () { that.positionY_start(); },
                    function (x, y) { that.positionY_move(x, y); },
                    function () { that.positionY_end(); });

                this.panelZ = new TouchPanel(jqPanelZ,
                    function () { that.positionZ_start(); },
                    function (x, y) { that.positionZ_move(x, y); },
                    function () { that.positionZ_end(); });
            }

            positionX_start() {
                this.connectionHub.invoke("ExecuteCommand", `rigifyControler.save_bone_rotation('${this.objectName.val}')`);
            }

            positionX_move(x, y) {
                var s = 0.02;
                this.connectionHub.invoke("ExecuteCommand", `rigifyControler.add_bone_rotation('${this.objectName.val}',(${x*s},0,0))`);
            }

            positionX_end() { }

            positionY_start() {
                this.connectionHub.invoke("ExecuteCommand", `rigifyControler.save_bone_rotation('${this.objectName.val}')`);
            }

            positionY_move(x, y) {
                var s = 0.02;
                this.connectionHub.invoke("ExecuteCommand", `rigifyControler.add_bone_rotation('${this.objectName.val}',(0,${-x * s},0))`);
            }

            positionY_end() { }

            positionZ_start() {
                this.connectionHub.invoke("ExecuteCommand", `rigifyControler.save_bone_rotation('${this.objectName.val}')`);
            }

            positionZ_move(x, y) {
                var s = 0.02;
                this.connectionHub.invoke("ExecuteCommand", `rigifyControler.add_bone_rotation('${this.objectName.val}',(0,0,${-x * s}))`);
            }
            positionZ_end() { }
        }

        class Rotation3dDevice {
            timer;
            alpha;
            alphaLast;
            beta;
            betaLast;
            gamma;
            gammaLast;

            constructor(connectionHub, jqPanel, objectName) {
                this.connectionHub = connectionHub;
                this.objectName = objectName;
                this.enableDeviceOrientation = false;
                
                var divPanel = jqPanel[0];
                var that = this;

                if (window.DeviceOrientationEvent) {
                    window.addEventListener("deviceorientation",
                        function (event) {
                            //var absolute = event.absolute;
                            var alpha = Number(event.alpha);
                            if (alpha > 180) {
                                alpha = alpha - 360;
                            }
                            that.alpha = alpha;
                            that.beta = Number(event.beta) /4.0;
                            that.gamma = Number(event.gamma) /4.0 ;
                        });
                } else {
                    alert("Sorry, your browser doesn't support Device Orientation");
                }

                divPanel.addEventListener("click", function (e) {
                    
                    if (that.enableDeviceOrientation == true) {

                        //wlaczam
                        that.connectionHub.invoke("SaveObjectRotation", that.objectName.val);
                        that.alphaLast = that.alpha;
                        that.betaLast = that.beta;
                        that.gammaLast = that.gamma;

                        that.timer = setInterval(function () {

                            var dAplha = that.alphaLast - that.alpha;
                            that.alphaLast = that.alpha;

                            var dbeta = that.betaLast - that.beta;
                            that.betaLast = that.beta;

                            var dgamma = that.gammaLast - that.gamma;
                            that.gammaLast = that.gamma;

                            that.connectionHub.invoke("RotateObjectXYZ", dgamma, -dbeta, dAplha, 0.5, that.objectName.val);
                            var pInfo = $('#pInfoOrientation');
                            pInfo.html(that.alpha.toFixed(2) + " " + that.beta.toFixed(2) + " " + that.gamma.toFixed(2));

                        }, 100);

                    } else {
                        //wyłączam
                        clearInterval(that.timer);       
                    }
                    that.enableDeviceOrientation = !that.enableDeviceOrientation;

                    

                });

                //divPanel.addEventListener("touchend", function (e) {
                //    e.preventDefault();
                                 
                //}, false);

                //divPanel.addEventListener("touchmove", function (e) {
                //    e.preventDefault();
                   
                //}, false);
            }
        }

        
        class ControllerViewModel {
            constructor() {
                this.activeObjectName = new rString("head");//"Object___ik_hand_l";//"Bone___root___hand_l_ik"; //"Object___Cube" "Bone___ArmatureName___BonaName
                this.connection = new signalR.HubConnectionBuilder()
                    .withUrl('/shapeHub')
                    .build();
                this.connection.start();
                var that = this;

                this.panel = new Position3dPanel(this.connection,
                    $('#tpPositionXY'), $('#tpPositionZ'), this.activeObjectName);
                this.rotation = new Rotation3dPanel3(this.connection,
                    $('#tpRotationX'), $('#tpRotationY'), $('#tpRotationZ'), this.activeObjectName);
                this.handPanel = new TouchPanel($('#tpHand'),
                    function () { that.hand_start(); },
                    function (x, y) { that.hand_move(x, y); },
                    function () { that.hand_end(); });
                this.rr = new Rotation3dDevice(this.connection, $('#tpRecordRotation'), this.activeObjectName);
            }

            hand_start() {
            }

            hand_move(x, y) {
                var s = 0.015;
                if (this.activeObjectName.val == "hand_ik.L") {
                    this.connection.invoke("ExecuteCommand", `rigifyControler.hand_l(${-y*s},${x*s})`);
                } else if (this.activeObjectName.val == "hand_ik.R") {
                    this.connection.invoke("ExecuteCommand", `rigifyControler.hand_r(${-y * s},${x * s})`);
                }
            }
            hand_end() { }
        }
        
        var viewModel = new ControllerViewModel();     

        function setActiveBone(boneName) {            
            viewModel.activeObjectName.setVal(boneName);
        }

        
    </script>
</body>
</html>