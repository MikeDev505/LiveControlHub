<!doctype html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="ScreenOrientation" content="autoRotate:disabled">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl" crossorigin="anonymous">

    <title>Hello, world!</title>
</head>
<body style="width:100vw; height:90vh; background-color:lightgray">
    <div class="container">
        <div class="row my-1" style="height:30vh">
            <div id="tpPosition2" class="col-2 h-100 mx-1" style="background-color:gray; ">
                <div>scale XY</div>
            </div>
            <div id="tpPosition" class="col-9 h-100" style="background-color:gray; ">
                <div>position XY</div>
            </div>
        </div>
        <div class="row my-1" style="height:10vh">
            <div id="tpPositionZ" class="col-12 h-100" style="background-color:gray; ">
                <div>position Z</div>
            </div>
        </div>

        <div class="row my-2" style="height:30vh">
            <div id="tpPositionZ" class="col-12 h-100" style="background-color:gray; ">
                <div>rotation Z</div>
            </div>
        </div>
        <div class="row my-2" style="height:10vh">
            <div id="tpPositionZ" class="col-12 h-100" style="background-color:gray; ">
                <div>rotation Z</div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row">
            <div id="pInfoPosition" class="col">

            </div>
        </div>
        <div class="row">
            <div id="pInfoOrientation" class="col">
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.6.0/dist/umd/popper.min.js" integrity="sha384-KsvD1yqQ1/1+IA7gi3P0tyJcT3vR+NdBTt13hSJ2lnve8agRGXTTyNaBYmCR/Nwi" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.min.js" integrity="sha384-nsg8ua9HAw1y0W1btsyWgBklPnCUAFLuTMS2G72MMONqmOymq585AcH49TLBQObG" crossorigin="anonymous"></script>


    <script>
        class TouchPanel {
            constructor(jqueryDivPanel, jqueryDivInfo) {
                this.jqueryDivInfo = jqueryDivInfo;
                var divPanel = jqueryDivPanel[0];
                var that = this;
                divPanel.addEventListener("touchstart", function (e) {
                    that.touchPosStart = e.touches[0];
                });

                divPanel.addEventListener("touchend", function (e) {
                    e.preventDefault();
                    that.drawVector(that.touchPosStart, that.touchPosEnd);
                }, false);

                divPanel.addEventListener("touchmove", function (e) {
                    e.preventDefault();
                    that.touchPosEnd = e.touches[0];
                }, false);
            }

            //zmienne
            touchPosStart;
            touchPosEnd;

            //metody pomocnicze
            drawVector(mouseStart, mouseEnd) {
                this.jqueryDivInfo.html(Number(mouseEnd.clientX - mouseStart.clientX).toFixed(2) + " " + Number(mouseEnd.clientY - mouseStart.clientY).toFixed(2));
            }
        }


        //var touchPosStart;
        //var touchPosEnd;

        //function init() {
        //    var tpPosition = $('#tpPosition')[0];//document.getElementById('tpPosition');
        //    //debugger;
        //    tpPosition.addEventListener("touchstart", function (e) {
        //        touchPos = e.touches[0];
        //        touchPosStart = touchPos;
        //    });

        //    tpPosition.addEventListener("touchend", function (e) {
        //        e.preventDefault();
        //        drawVector(touchPosStart, touchPosEnd);
        //    }, false);

        //    tpPosition.addEventListener("touchmove", function (e) {
        //        e.preventDefault();
        //        touchPosEnd = e.touches[0];
        //        // do_mouse_move_logic(mousePos.x, mousePos.y, touch.clientX, touch.clientY);
        //    }, false);

        //    if (window.DeviceOrientationEvent) {
        //        window.addEventListener("deviceorientation", deviceOrientationListener);
        //    } else {
        //        alert("Sorry, your browser doesn't support Device Orientation");
        //    }

        //}

        //function drawVector(mouseStart, mouseEnd) {
        //    var pInfo = $('#pInfoPosition');
        //    pInfo.html((mouseEnd.clientX - mouseStart.clientX) + " " + (mouseEnd.clientY - mouseStart.clientY));
        //}

        function deviceOrientationListener(event) {
            //alert('sdf');
            var absolute = event.absolute;
            var alpha = event.alpha;
            var beta = event.beta;
            var gamma = event.gamma;

            var pInfo = $('#pInfoOrientation');
            pInfo.html(Number(alpha).toFixed(2) + " " + Number(beta).toFixed(2) + " " + Number(gamma).toFixed(2));
        }
            if (window.DeviceOrientationEvent) {
                window.addEventListener("deviceorientation", deviceOrientationListener);
            } else {
                alert("Sorry, your browser doesn't support Device Orientation");
            }


        var lockFunction = window.screen.orientation.lock;
        if (lockFunction.call(window.screen.orientation, 'landscape')) {
            console.log('Orientation locked')
        } else {
            console.error('There was a problem in locking the orientation')
        }

        //init();

        var panel = new TouchPanel($('#tpPosition'), $('#pInfoPosition'));
        //alert('tzzz');
    </script>
</body>
</html>